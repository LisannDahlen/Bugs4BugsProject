// <auto-generated />
using System;
using Bugs4Bugs.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bugs4Bugs.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230403134940_Default users with roles added")]
    partial class Defaultuserswithrolesadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bugs4Bugs.Models.BugType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BuggTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Program crash"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Visual glitch"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Performance issue"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Unexpected behaviour"
                        });
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Visual Studio",
                            PhotoURL = "Images/VisualStudio.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Visual Studio Code",
                            PhotoURL = "Images/VSCode.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Firefox",
                            PhotoURL = "Images/Firefox.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chrome",
                            PhotoURL = "Images/chrome.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Skynet",
                            PhotoURL = "Images/Skynet.png"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spotify",
                            PhotoURL = "Images/Spotify.png"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Netflix",
                            PhotoURL = "Images/Netflix.png"
                        },
                        new
                        {
                            Id = 8,
                            Name = "BookBeat",
                            PhotoURL = "Images/BookBeat.png"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Blocket",
                            PhotoURL = "Images/Blocket.png"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ebay",
                            PhotoURL = "Images/Ebay.png"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Microsoft Teams",
                            PhotoURL = "Images/Teams.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Youtube",
                            PhotoURL = "Images/Youtube.png"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Bugs4Bugs",
                            PhotoURL = "Images/bee.png"
                        });
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Bugs4Bugs.Models.SiteUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "defaultUser",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aeb1066b-f10f-4cf4-8b15-df7153dff986",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Connor",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENFbPoWzVw2IpPMtEmrykq2/iIGSSbERoQdAfqbNZTmrDEakL2Cr6wSoWac1iHGkOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0d0ccda-d7f3-4f31-83e3-f75e69e63b83",
                            TwoFactorEnabled = false,
                            UserName = "JohnConnor"
                        },
                        new
                        {
                            Id = "defaultDeveloper",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e1cfce5-12ae-4a96-94eb-d0679601939e",
                            EmailConfirmed = false,
                            FirstName = "Dev",
                            LastName = "Code",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECiiHi73liPw0NRzU+2JZMRDoi3I/504RmsNNKShcAHlBxx9N6cqhuTisCYH9M7fYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9326ab5-a422-42e4-a78e-2de5bfa1d647",
                            TwoFactorEnabled = false,
                            UserName = "DevCode"
                        },
                        new
                        {
                            Id = "defaultOwner",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "954bd290-d091-41e3-900f-6545dda508ce",
                            EmailConfirmed = false,
                            FirstName = "Owen",
                            LastName = "Er",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECajnVPqnyn4Q9ESMyJWXP71pGToVU1JUN6+O29LndX4jYE02JTWsW8yVDy5Pqf5sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fddb81c9-df2e-4fb0-a8af-9dfa14ae6f50",
                            TwoFactorEnabled = false,
                            UserName = "OwenEr"
                        });
                });

            modelBuilder.Entity("Bugs4Bugs.Models.SiteUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RoleInProductId")
                        .HasColumnType("int");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoleInProductId");

                    b.HasIndex("SiteUserId");

                    b.ToTable("SiteUserRole");
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHexString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorHexString = "#adb5bd",
                            Description = "This ticket is open and currently waiting to be assigned to a developer.",
                            TicketStatus = "Closed"
                        },
                        new
                        {
                            Id = 2,
                            ColorHexString = "#198754",
                            Description = "This ticket is open and currently waiting to be assigned to a developer.",
                            TicketStatus = "Resolved"
                        },
                        new
                        {
                            Id = 3,
                            ColorHexString = "#0d6efd",
                            Description = "This ticket is open and currently waiting to be assigned to a developer.",
                            TicketStatus = "Opened"
                        },
                        new
                        {
                            Id = 4,
                            ColorHexString = "#FFCD29",
                            Description = "This ticket is open and currently waiting to be assigned to a developer.",
                            TicketStatus = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            ColorHexString = "#0d6efd",
                            Description = "This ticket is open and currently waiting to be assigned to a developer.",
                            TicketStatus = "Assigned"
                        });
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmitterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketBugTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TicketProductId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TicketUrgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("TicketBugTypeId");

                    b.HasIndex("TicketProductId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("TicketUrgencyId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "En smältande polis jagar mig och en Österrikisk bodybuilder säger att jag ska rädda framtiden",
                            LastUpdated = new DateTime(2023, 4, 10, 15, 49, 40, 411, DateTimeKind.Local).AddTicks(1604),
                            SubmittedDate = new DateTime(2023, 4, 6, 15, 49, 40, 411, DateTimeKind.Local).AddTicks(1540),
                            SubmitterId = "defaultUser",
                            TicketBugTypeId = 1,
                            TicketProductId = 5,
                            TicketStatusId = 1,
                            TicketUrgencyId = 1,
                            Title = "Mördarrobotar"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Jag gjorde min matteläxa när programmet plötsligt",
                            LastUpdated = new DateTime(2023, 4, 3, 15, 49, 40, 411, DateTimeKind.Local).AddTicks(1612),
                            SubmittedDate = new DateTime(2023, 4, 3, 15, 49, 40, 411, DateTimeKind.Local).AddTicks(1610),
                            SubmitterId = "defaultUser",
                            TicketBugTypeId = 3,
                            TicketProductId = 1,
                            TicketStatusId = 3,
                            TicketUrgencyId = 2,
                            Title = "Programmet åt min läxa"
                        });
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Urgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHexString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Urgencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorHexString = "#0D6EFD",
                            Level = "Low"
                        },
                        new
                        {
                            Id = 2,
                            ColorHexString = "#FFCD29",
                            Level = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            ColorHexString = "#FD7E14",
                            Level = "High"
                        },
                        new
                        {
                            Id = 4,
                            ColorHexString = "#DC3545",
                            Level = "Critical"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "UserRoleId",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "TechnicianRoleId",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "ManagerRoleId",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "defaultUser",
                            RoleId = "UserRoleId"
                        },
                        new
                        {
                            UserId = "defaultDeveloper",
                            RoleId = "TechnicianRoleId"
                        },
                        new
                        {
                            UserId = "defaultOwner",
                            RoleId = "ManagerRoleId"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bugs4Bugs.Models.SiteUserRole", b =>
                {
                    b.HasOne("Bugs4Bugs.Models.Product", null)
                        .WithMany("ProductTeam")
                        .HasForeignKey("ProductId");

                    b.HasOne("Bugs4Bugs.Models.Role", "RoleInProduct")
                        .WithMany()
                        .HasForeignKey("RoleInProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bugs4Bugs.Models.SiteUser", "SiteUser")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleInProduct");

                    b.Navigation("SiteUser");
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Ticket", b =>
                {
                    b.HasOne("Bugs4Bugs.Models.SiteUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bugs4Bugs.Models.BugType", "TicketBugType")
                        .WithMany()
                        .HasForeignKey("TicketBugTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bugs4Bugs.Models.Product", "TicketProduct")
                        .WithMany()
                        .HasForeignKey("TicketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bugs4Bugs.Models.Status", "TicketStatus")
                        .WithMany()
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bugs4Bugs.Models.Urgency", "TicketUrgency")
                        .WithMany()
                        .HasForeignKey("TicketUrgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submitter");

                    b.Navigation("TicketBugType");

                    b.Navigation("TicketProduct");

                    b.Navigation("TicketStatus");

                    b.Navigation("TicketUrgency");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bugs4Bugs.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bugs4Bugs.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bugs4Bugs.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bugs4Bugs.Models.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bugs4Bugs.Models.Product", b =>
                {
                    b.Navigation("ProductTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
